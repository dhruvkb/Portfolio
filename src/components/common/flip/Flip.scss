@use 'sass:math';

@use '~@/styles/tokens/colors';
@use '~@/styles/tokens/dimensions';
@use '~@/styles/tokens/durations';

@use '~@/styles/mixins/colored';

@use '~@/styles/utils/controls';
@use '~@/styles/utils/theming';

.flip {
  $outer-space: dimensions.$dimen-xxs;
  $inner-space: dimensions.$dimen-xs;

  $thumb-width: 1.5em;
  $thumb-height: 1.5em;

  $icon-width: $thumb-width / math.sqrt(2);
  $icon-height: $thumb-height / math.sqrt(2);

  $track-width: $outer-space + $thumb-width + $inner-space + $thumb-width + $outer-space;
  $track-height: $outer-space + $thumb-height + $outer-space;

  @include controls.reset-control;

  --inactive-color: var(--content-secondary);
  --active-color: var(--content);
  @include colored.colored('--active-color');

  --flip-color: var(--inactive-color);

  font-size: 1.5em / $thumb-height * 1em; // Makes the thumb sized like the icons

  .track {
    @include theming.transition(1);

    position: relative;

    display: block;

    height: $track-height;
    width: $track-width;

    background-color: var(--background-highlighted);

    border: 1px dashed transparent;
    border-radius: 999em;

    .content,
    .thumb {
      position: absolute;
    }

    .content {
      @include theming.transition(2);

      top: ($track-height - $icon-height) / 2;

      color: var(--flip-color);

      line-height: 1;

      .icon {
        height: $icon-height;
        width: $icon-width;

        --stroke-width: 45.2548px; // sqrt(2) * 32px
      }

      &.left {
        left: $outer-space + ($thumb-width - $icon-width) / 2;
      }

      &.right {
        right: $outer-space + ($thumb-width - $icon-width) / 2;
      }
    }

    .thumb {
      @include theming.transition(1, (transform), (durations.$duration-m)); // Same duration as theme change

      display: block;

      top: $outer-space;

      height: $thumb-height;
      width: $thumb-width;

      z-index: 1;

      background-color: var(--flip-color);

      border-radius: 999em;

      transform: translateX($outer-space);
    }
  }

  &.flipped {
    .track {
      .thumb {
        transform: translateX($outer-space + $thumb-width + $inner-space);
      }
    }
  }

  &:hover { // Mouse focus
    --flip-color: var(--active-color);
  }

  &:focus { // Keyboard focus
    .track {
      border-color: var(--active-color); // Using border instead of outline because rounded
    }
  }
}
